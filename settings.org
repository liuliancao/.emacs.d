#+title: liuliancao's emacs settings
#+author: liuliancao
#+email: liuliancao@gmail.com
#+last_modified: [2022-04-20 09:31]
#+options: num:nil

* Liuliancao's Emacs Settings
** Packages Related
#+begin_src emacs-lisp
(use-package package
  :ensure nil
  :config
  (setq package-archives '(("gnu" . "http://mirrors.ustc.edu.cn/elpa/gnu/")
			   ("melpa" . "http://mirrors.ustc.edu.cn/elpa/melpa/")
			   ))
  (package-initialize)
  (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  )
  (use-package diminish
	:ensure t)
#+end_src
** Menus Related
#+begin_src emacs-lisp
  ;;(setq-default auto-fill-function 'do-auto-fill)
  (setq inhibit-startup-screen t)
  (use-package scratch
    :ensure t)
  (use-package command-log-mode
    :ensure t)
  (use-package rainbow-mode
    :ensure t
    :diminish t
    :hook ((prog-mode . rainbow-mode)
	   (help-mode . rainbow-mode))
    :config
    (use-package rainbow-delimiters
      :ensure t
      :diminish t
      :hook (prog-mode . rainbow-delimiters-mode)
      )
    )
  (setq-default initial-scratch-message
		(concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n"))
  ;; add blink line
  (use-package beacon
    :ensure t
    :config
    (add-hook 'after-init-hook 'beacon-mode)
  )
  ;; use y or n to yes and no
  (fset 'yes-or-no-p 'y-or-n-p)
  (use-package switch-window
    :ensure t
    :config
    (setq-default switch-window-shortcut-style 'alphabet)
    (setq-default switch-window-timeout nil)
    (global-set-key (kbd "C-x o") 'switch-window)
    )
#+end_src
** Custom file Related
   否则会自动生成在init.el，看起来不方便
#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)
;; let eww visit url
(setq browse-url-browser-function 'eww-browse-url)
#+end_src
** Tmp file Related
否则会在目录下面生成临时文件
#+begin_src emacs-lisp
  (setq backup-directory-alist
	    `(("." . ,(concat user-emacs-directory "backups"))))
#+end_src

** Complete Related
使用company组件
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :bind (:map company-active-map
		("M-n" . nil)
		("M-p" . nil)
		("C-n" . company-select-next)
		("C-p" . company-select-previous))
    :diminish t
    :config
    (global-company-mode t)
    (setq company-idle-delay 0)
    (setq company-tooltip-limit 10)
    (setq company-echo-delay 0)
    (setq company-minimum-prefix-length 2)
    (setq company-dabbrev-downcase nil)
    (setq company-begin-commands '(self-insert-command))
    (setq company-backends
	  '((company-files
	     company-yasnippet
	     company-keywords
	     company-capf)
	    (company-abbrev company-dabbrev)))
    (defvar my-company-point nil)
    (advice-add 'company-complete-common :before (lambda () (setq my-company-point (point))))
    (advice-add 'company-complete-common :after (lambda ()
						  (when (equal my-company-point (point))
						    (yas-expand))))
    )

  (use-package company-quickhelp  :ensure t)

  (add-hook 'emacs-lisp-mode-hook
	    (lambda ()
	      (add-to-list (make-local-variable 'company-backends)
			   '(company-elisp company-yasnippet)))
	    )
  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+end_src
** Locale Related
#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
#+end_src

** Grammer check Related
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'flycheck-mode)
    (use-package flycheck-aspell
      :ensure t)
  )
#+end_src   
** Snippets Related
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'org-mode-hook 'yas-minor-mode)
    :config
    (yas-reload-all)
    (use-package yasnippet-snippets
      :ensure t))
#+end_src

** Visual mode Related
一列或者多列集体编辑，参考vim的visual mode
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :config
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  )
#+end_src
   
** Search Related
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-height 10)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-count-format "%d/%d")
    (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order))))

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)))

  (use-package anzu
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-anzu-mode)
    (setq anzu-mode-lighter "")
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
    (global-set-key [remap query-replace] 'anzu-query-replace)
  )
  ;; shortcut tips 
  (use-package which-key
    :ensure t
    :diminish t
    :config
    (add-hook 'after-init-hook 'which-key-mode)
    )
#+end_src
** Org mode Related
#+begin_src emacs-lisp
  (org-reload)
  (with-eval-after-load 'org-agenda
    ;;(setq org-agenda-files (find-lisp-find-files "~/todo/" "\.org$"))
    (setq org-agenda-files (list "~/todo/inbox.org"
				 "~/todo/done.org"
				 "~/todo/task.org"
				 "~/todo/project.org"))

    (setq org-default-notes-file "~/todo/task.org")
    )
  (use-package org-cliplink
    :ensure t)
  (define-key global-map (kbd "C-c a") 'org-agenda)
  (define-key global-map (kbd "C-c c") 'org-capture)

  (setq org-capture-templates
	`(("t" "todo" entry (file "")  ; "" => `org-default-notes-file'
	   "* NEXT %?\n%U\n" :clock-resume t)
	  ("n" "note" entry (file "")
	   "* %? :NOTE:\n%U\n%a\n" :clock-resume t)
	  ))

  (setq org-todo-keywords
	(quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
		(sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
		(sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")))
	org-todo-repeat-to-state "NEXT")

  (add-hook 'org-agenda-mode-hook 'hl-line-mode)

  (use-package ob-go
    :ensure t)
  (use-package ob-http
    :ensure t)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     `((R . t)
       (ditaa . t)
       (dot . t)
       (C . t)
       (emacs-lisp . t)
       (gnuplot . t)
       (haskell . nil)
       (latex . t)
       (ledger . t)
       (go . t)
       (ocaml . nil)
       (octave . t)
       (plantuml . t)
       (python . t)
       (ruby . t)
       (http . t)
       (screen . nil)
       (,(if (locate-library "ob-sh") 'sh 'shell) . t)
       (sql . t)
       (sqlite . t))))

  ;; add support export markdown
  (with-eval-after-load 'org
    (require 'ox-md nil t)
    (use-package org-re-reveal
      :ensure t
      :config
      (setq org-re-reveal-root "https://cdn.bootcdn.net/ajax/libs/reveal.js/3.9.2/"
      org-re-reveal-revealjs-version "3.8")
    )
    (setq diary-file "~/diary")
  )

  ;; add ditaa setting with apt-get install ditaa
  (setq org-ditaa-jar-path (expand-file-name "/usr/share/ditaa/ditaa.jar"))
  ;; change for _
  (setq org-export-with-sub-superscripts (quote {}))
  (setq time-stamp-active t
	time-stamp-start "#\\+last_modified:"
	time-stamp-end "$"
	time-stamp-format " [%04Y-%02m-%02d %02H:%02M]")
  (add-hook 'before-save-hook 'time-stamp nil)

  ;; latex something
  (setq org-latex-pdf-process
	'(
	  "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "rm -fr %b.out %b.log %b.tex auto"
	  ))
  (setq org-latex-compiler "xelatex")
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-PDF-mode t)
  (setq TeX-command-default "XeLaTeX")
  (add-hook 'LaTeX-mode-hook 'linum-mode)

  (use-package org-tree-slide
    :ensure t)
  (use-package habitica
    :ensure t
    :init
    (setq habitica-uid (getenv "HABITICA_UID"))
    (setq habitica-token (getenv "HABITICA_TOKEN"))
    )

#+end_src
** Note Related
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (make-directory "~/org-roam")
    (setq org-roam-db-gc-threshold most-positive-fixnum)
    (setq org-roam-directory "~/org-roam")
    (setq org-roam-completion-everywhere t)
    (setq org-roam-v2-ack t)
    (setq org-roam-ui-mode nil)
    (add-hook 'after-init-hook 'org-roam-mode)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup)
    (setq org-roam-capture-templates
	  '(("d" "default" plain "%?" :if-new
	     (file+head "%<%Y-%m-%d>-${slug}.org" "#+title: ${title}\n#+date: [%<%Y-%m-%d %H:%M>] \n#+last_modified: [%<%Y-%m-%d %H:%M>] \n\n* ${title}\n\n** 参考文档")
	     :unnarrowed t)
	    )
	  )
    )

  (use-package deft
    :ensure t
    :defer t
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory org-roam-directory))

#+end_src
** Project Related
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :ensure t
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (projectile-global-mode +1)
  (setq-default projectile-mode-line-prefix " Proj")
  (setq projectile-enable-caching nil)
  (when (executable-find "rg")
    (setq-default projectile-generic-command "rg --files --hidden"))
  (use-package ibuffer-projectile
    :ensure t)
  (use-package ag
    :ensure t)
  )
#+end_src
** Git Related
magit相关
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  :after
  (fullframe magit-status magit-mode-quit-window))
#+end_src
** C/C++ Related
lsp-mode的后端有cquery, clangd, ccls，我用的ccls(https://github.com/MaskRay/ccls/wiki/lsp-mode)

就是你启用的哪个，lsp会从里面遍历
#+begin_src emacs-lisp
(use-package ccls
  :ensure t
  :hook ((c-mode c++-mode objec-mode cuda-mode) . (lambda () (require 'ccls) (lsp))))
(use-package xcscope
:ensure t)
#+end_src
** Golang Related
安装gopls
#+begin_src sh
go get golang.org/x/tools/gopls@latest
#+end_src

#+begin_src emacs-lisp
(use-package go-mode
  :ensure t
  :mode (("\\.go\\'" . go-mode))
  :hook ((before-save . gofmt-before-save))
  :config
  ;;(setq gofmt-command "goimports")
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  (add-hook 'go-mode-hook 'lsp-deferred)
  (add-hook 'go-mode-hook #'yas-minor-mode)

  ;; Set up before-save hooks to format buffer and add/delete imports.
  (use-package company-go
    :ensure t
    )
  (use-package go-eldoc
    :ensure t
    :hook (go-mode . go-eldoc-setup)
    )
  (use-package go-guru
    :ensure t
    :hook (go-mode . go-guru-hl-identifier-mode)
    )
  (use-package go-rename
    :ensure t)
  )
#+end_src

** Python Related
#+begin_src emacs-lisp
  ;; pip3 install python-lsp-server[all] pylsp-rope
    (use-package python
      :ensure t
      :mode ("\\.py\\'" . python-mode)
      :hook (python-mode . lsp-deferred)
      :interpreter ("python" . python-mode)
      :config
      (setq indent-tabs-mode nil)
      (setq python-indent-offset 4)
      (use-package py-autopep8
        :ensure t
        :hook ((python-mode . py-autopep8-enable-on-save)))
      (use-package company-jedi
        :ensure t
        :config
        (add-hook 'python-mode-hook 'jedi:setup)
        )
      )

    (use-package elpy
      :ensure t
      :commands (elpy-enable)
      :config
      (setq eply-rpc-backend "jedi"))

    (use-package pipenv
      :ensure t
      :hook (python-mode . pipenv-mode))

    (use-package yapfify
    :ensure t
    :config
    (add-hook 'python-mode-hook 'yapf-mode))
#+end_src
** Groovy Related
#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t)
#+end_src

** Angular Related
#+begin_src emacs-lisp
(use-package ng2-mode
  :ensure t)
#+end_src
** Lsp Related
我使用lsp的原因是它是一个框架，整体比较简单，C、Go、Python配置起来都不难
#+begin_src emacs-lisp
  (use-package lsp-mode
  :commands lsp
  :bind
  ("C-c C-j" . lsp-find-definition))

  (use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
  (use-package company-lsp
    :commands company-lsp)
  (use-package autoinsert
    :ensure t
    :init (auto-insert-mode t)
    :config
    (define-auto-insert '(python-mode . "Python skeleton")
      '("Auto insert python heading: "
        "#!/usr/bin/env python3" \n
        "# -*- coding: utf-8 -*-" \n
        "# Date: " (substring (current-time-string)) \n
        "# Author: " (progn user-full-name) " <lqx@wooduan.com>" \n
        "# Copyright (c) @wooduan-ops" \n
        "\"\"\"Description: something.\"\"\"" \n \n
        ))
    )
#+end_src
** Terraform Related
terraform接触的比较多，整体用起来挺好的，主要对齐等比较方便
#+begin_src emacs-lisp
(use-package terraform-mode
  :ensure t
  :hook (terraform-mode . flycheck-mode)
  :config
  (use-package company-terraform
  :ensure t)
  (use-package reformatter
  :ensure t
  :config
  (reformatter-define terraform-format
    :program "terraform" :args '("fmt" "-"))
  )
)
#+end_src
** Nginx mode Related
#+begin_src emacs-lisp
(use-package nginx-mode
  :ensure t
  :hook (nginx-mode . flycheck-mode))
#+end_src
** Ansible Related
#+begin_src emacs-lisp
  (use-package ansible
    :ensure t)
#+end_src

** Yaml Related
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode ("\\.yml\\'" . yaml-mode)
  :hook (yaml-mode-hook . goto-address-prog-mode)
)
#+end_src
** Json Related
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t)
#+end_src

** Jinja2 Related
#+begin_src emacs-lisp
  (use-package jinja2-mode
    :ensure t)
#+end_src

** Rst Related
#+begin_src emacs-lisp
  (use-package ox-rst
    :ensure t)
#+end_src

** Sphinx Related
#+begin_src emacs-lisp
  (use-package sphinx-mode
    :ensure t)
#+end_src

** PDF Related
#+begin_src emacs-lisp
(add-hook 'doc-view-mode-hook (lambda ()
  (linum-mode -1)))
#+end_src
默认情况下emacs读pdf目前看是比较慢的，和默认渲染成PNG图片有关，读SRE那本书，

总是加载要挺久，不过记笔记非常方便，可以相像下，分屏，左边pdf，右边笔记本

** Music Related
我用的网易云音乐，这个是国人开发的，厉害。上班时候，打开编辑器，听歌开始美妙的一天~
#+begin_src emacs-lisp
  (use-package async
    :pin melpa
    :ensure t)
  (use-package netease-cloud-music
    :ensure t)
#+end_src   
M-x netease-cloud-music-download-api下载api程序用于登录

M-x netease-cloud-music进入netease-cloud-music， 按l登录

输入用户名密码，就好了, 登录进去以后会看到用户，按u查找自己的歌单

C-x h选中歌单，按RET（回车），就加到歌单了

按?可以查看模式下常用的命令，n p前一首下一首

** RSS Related
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :bind (("C-x w" . elfeed)
	   :map elfeed-search-mode-map
		("g" . elfeed-update))
    )
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Documents/rss/elfeed.org")))
#+end_src

我的订阅，比较简单，但是养成一个每天读rss的习惯挺好的，慢慢习惯就好了

#+begin_src sh
# blogs
http://lanbing510.info/pages/atom.xml
http://www.ruanyifeng.com/blog/atom.xml
http://feed.williamlong.info/
http://linux.cn/rss.xml
http://www.raychase.net/feed
http://sspai.com/feed
https://feed.infoq.com/cn/mbnmnbm/
http://noops.me/?feed=rss2
# emacs
http://www.reddit.com/r/emacs/.rss
http://planet.emacsen.org/atom.xml
# my blog
https://blog.liuliancao.com/rss.xml
# security
http://www.cvedetails.com/vulnerability-feeds-form.php
#+end_src

** Puppet Related
#+begin_src emacs-lisp
(use-package puppet-mode
    :ensure t)
#+end_src

** Rime input Related
使用C-\切换到emacs-rime输入法
#+begin_src emacs-lisp
  (use-package rime
    :ensure t
    :custom
    (default-input-method "rime")
    (setq rime-user-data-dir "~/.config/fcitx/rime")
  )
#+end_src

** Plantuml Related
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :config
    (setq plantuml-default-exec-mode 'jar)
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (setq org-plantuml-jar-path
	  (expand-file-name "~/plantuml-1.2022.1.jar"))
    )
  (use-package flycheck-plantuml
    :ensure t
    :config
    (flycheck-plantuml-setup))
#+end_src

